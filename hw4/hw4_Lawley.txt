Analysis of Algorithms Homework 4
Lane Lawley

Problem 1

Heart of the Solution:
	What:
		S[i] = Longest alternating subsequence ending with element i
	How:
		S[i] = 1 + Longest alternating subsequence ending with element k where k < i and a[k]'s parity differs from a[i]'s
	Where:
		Solution is at the final element of the S array


Problem 2

My algorithm works by storing two variables, totalEven and totalOdd. For each number, if it's even, I add one plus the totalOdds to totalEvens, and if it's odd, I add one plus the totalEvens to totalOdds. Re-counting all of these ensures that, if an even element can be appended to an alternating subsequence (because it differs from the parity of its last element), all of those alternating subsequences are re-counted.

The actual names of the variables are totalNumberOfAlternatingSubsequencesWhoseLastElementIsEven and totalNumberOfAlternatingSubsequencesWhoseLastElementIsOdd. Enjoy!


Problem 3

Heart of the Solution:
	What:
		S[k][j] = Whether it's possible to be a distance of j away from the origin by placing the kth zollstock piece.
	How:
		S[0][j] = True iff j is equal to the length of the first zollstock piece.
		S[k > 0][j] = True iff S[k - 1][abs(j - length of kth zollstock piece)] or S[k - 1][j + length of kth zollstock piece] are valid and true.
	Where:
		Answer is yes iff there is any element in S[n] that is true, where n is the number of zollstock pieces given (please ignore the off-by-one error).

Reconstruction:
	First, I pick any "true" element in the last row. Then, I trace its path back up the array by finding distances that can be modified by their respective zollstock piece to reach the current distance. Then, I go back down the path, printing left if we had to add the length and right if we had to subtract the length.