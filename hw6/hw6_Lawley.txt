Analysis of Algorithms Homework 6
Lane Lawley

Problem 1:
	Description:
		My algorithm uses a breadth first search on the implicit graph of all possible states, checking each state it encounters to see if it's the game-winning state. If no game-winning state is found, there is no way to win.
	
	Pseudocode:
		initial_state = read from file
		state_queue = new queue
		state_queue.add(initial_state)
		
		initialize every state's "seen value" to -1
		initialize initial_state's "seen value" to 0
		
		while state_queue is not empty:
			pull a state from the top of state_queue and call it curr_state
			if curr_state is a winning state:
				print curr_state's "seen value" and exit - we've won!
			
			for every next_state in curr_states next possible states:
				if next_state's "seen value" is -1:
					add next_state to the end of state_queue
					set next_state's "seen value" to curr_state's "seen value" plus one
		
		state_queue is now empty and we haven't won...that means we've lost
	
	Running Time Estimate:
		There are (mn)^2 possible states, since each coordinate is m*n, and there are two coordinates. Generation of one neighbor state takes O(m+n) time due to the scanning involved in either dimension. Since every state is generated once and only once, the running time of the algorithm is O((m+n)(mn)^2).

Problem 2:
	Description:
		My algorithm utilizes Kruskal's algorithm to build a minimum spanning tree. However, since all edges in the set F must be taken, when sorting the edges by increasing weight, I prioritize edges in F, setting them in front of all other edges. I then scan through these sorted edges; if any edge in F causes a cycle, F contains a cycle, and the input is invalid. Otherwise, the algorithm takes all edges in F and then proceeds as normal, building the minimum F-containing spanning tree.
		
		(NB: I've implemented the union-find data structure we discussed in class, and so I'm including those operations in the pseudocode below)
	
	Pseudocode:
		cost = 0
		edges = edges sorted in increasing order of weight, giving priority to edges in F
		initialize union-find structure as discussed in class
		for edge e = (u, v, weight, isMemberOfF):
			if find(u) != find(v):
				cost += weight
				unite(u, v)
			else if isMemberOfF:
				terminate algorithm, since F contains a cycle
	
	Running Time Estimate:
		Kruskal's algorithm runs in O(m log m) + O(n log n) time, as we proved in class. Merge sorting the edges runs in O(m log m) time.

Problem 3:
	This algorithm can fail on the following input, depending on the order it chooses to evaluate the neighbors:
	
		Vertices = {0, 1, 2, 3}
		Source Vertex = 0
		Edges (u, v, weight) = {(0, 1, 14), (0, 2, 6), (0, 3, 100), (2, 1, 1), (3, 1, 1)}
	
	The output of the algorithm and the optimal output differ. The given algorithm will insist that the shortest path from vertex 0 to vertex 3 is 15. However, it is possible to get to vertex 3 from vertex 0 with a path of combined weight 8.
	
	I understand that this is quite unclear; please come see me for a visual explanation. I can be found in the bed diagonally adjacent to yours, or occasionally in the kitchen.
		
		
		
		
		